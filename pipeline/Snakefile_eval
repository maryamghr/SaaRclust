configfile: "config.yaml"
whatshap = config["whatshap"]
PBbamDir = config["pb_bam_dir"]
N = config["Nchunks"]
l = len(str(N))
chunkID = ['0'*(l-len(str(i)))+str(i) for i in range(N)]
sample = config["sample"]
w = config["w"]
kMinimap = config["k_minimap"]
fMinimap = config["f"]
z = config["z"]
SSfastqDir = config["SS_fastq_dir"]
SSbamDir = config["SS_bam_dir"]
outputfolder    = "SaaRclust_results"
chroms, = glob_wildcards(config["phased_vcf_dir"]+config["vcf_prefix"]+".{chrom}.vcf.gz")
libs, = glob_wildcards(SSfastqDir+"/{lib}_1.fastq.gz")
outputfolder    = "SaaRclust_results"
#numClustersHard = config["numClustersHard"]
testNumClustersHard = config["testNumClustersHard"]
#numClustersSoft = config["numClustersSoft"]
#EMiter          = config["EMiter"]
alpha           = config["alpha"]
minLib          = config["minLib"]
upperQ          = config["upperQ"]
logLth          = config["logLth"]
theta_constrain = config["theta_constrain"]
log_scale  	= config["log_scale"]
numAlignments   = config["numAlignments"]
haplotypes = ['H1', 'H2']

wildcard_constraints:
	chunks = "[0-9]+",
	sample=sample,
	prefix="[rp]"


		

rule all:
	input:
		expand(SSbamDir+"/{lib}_haplotagged.bam.bai", sample=sample, lib=libs),
        
######################################################
########### merging and indexing vcf files ###########
######################################################

rule index_vcf_file:
	input: config["phased_vcf_dir"]+config["vcf_prefix"]+".{chrom}.vcf.gz"
	output: config["phased_vcf_dir"]+config["vcf_prefix"]+".{chrom}.vcf.gz.tbi"
	log: "log/index_vcf_file_{chrom}.log"
	shell: "tabix {input}"

rule merge_chromosome_vcf:
	input:
		vcf=expand(config["phased_vcf_dir"]+config["vcf_prefix"]+".{chrom}.vcf.gz", chrom=chroms),
		tbi=expand(config["phased_vcf_dir"]+config["vcf_prefix"]+".{chrom}.vcf.gz.tbi", chrom=chroms)
	output: config["phased_vcf_dir"]+"merged_phased.vcf.gz"
	log: "log/merge_chromosome_vcf.log"
	shell: #"(time bcftools merge --force-samples -Oz {input.vcf} -o {output}) > {log} 2>&1"
		'''
		(time cat <(zcat {input[0]} | awk '/^#/{{print}}') <(zcat {input} | awk '/^chr/{{print}}') | bgzip -c > {output}) > {log} 2>&1
		'''

rule index_merged_phased_vcf:
	input: config["phased_vcf_dir"]+"merged_phased.vcf.gz"
	output: config["phased_vcf_dir"]+"merged_phased.vcf.gz.tbi"
	log: "log/index_merged_phased_vcf.log"
	shell: "(time tabix {input}) > {log} 2>&1"

#####################################################
######### haplotagging overlap bubbles ########
#####################################################

rule bwa_index_ref:
	input: config["reference"]
	output: expand(config["reference"]+"{extention}", extention=['amb', 'ann', 'bwt', 'pac', 'sa'])
	log: "log/bwa_index_ref.log"
	shell: "(time bwa index {input}) > {log} 2>&1"


rule bwa_map_unitigs_to_ref:
	input:
		ref=config["reference"],
		amb=config["reference"] + ".amb",
		ann=config["reference"] + ".ann",
		bwt=config["reference"] + ".bwt",
		pac=config["reference"] + ".pac",
		sa=config["reference"] + ".sa",
		unitigs="../../{sample}/hifiasm/asm.r_utg.fa"
	output: temp("../../{sample}/hifiasm/ref_aln/temp_asm.r_utg.bam")
	log: "log/bwa_map_unitigs_to_ref_{sample}.log"
	threads: 46
	shell:
		"(time bwa mem -t {threads} -c 1 {input.ref} {input.unitigs} | samtools view -Sb - > {output}) > {log} 2>&1"

rule bwa_sort_index_unitig_bams:
	input: "../../{sample}/hifiasm/ref_aln/temp_asm.r_utg.bam"
	output:
		bam="../../{sample}/hifiasm/ref_aln/asm.r_utg.bam",
		bai="../../{sample}/hifiasm/ref_aln/asm.r_utg.bam.bai"
	log: "log/bwa_sort_index_unitigs_bams_{sample}.log"
	shell: 
		'''
		(time samtools sort -o {output.bam} {input} &&
		samtools index {output.bam}) > {log} 2>&1
		'''

rule haplotag_unitigs:
	input:
		ref=config["reference"],
		amb=config["reference"] + ".amb",
		ann=config["reference"] + ".ann",
		bwt=config["reference"] + ".bwt",
		pac=config["reference"] + ".pac",
		sa=config["reference"] + ".sa",
		fai=config["reference"] + ".fai",
		vcf=config["phased_vcf_dir"]+"merged_phased.vcf.gz",
		tbi=config["phased_vcf_dir"]+"merged_phased.vcf.gz.tbi",
		bam="../../{sample}/hifiasm/ref_aln/asm.r_utg.bam",
		bai="../../{sample}/hifiasm/ref_aln/asm.r_utg.bam.bai",
	output: "../../{sample}/hifiasm/ref_aln/asm.r_utg.haplotagged.bam"
	log: "log/haplotag_unitigs_{sample}.log"
	shell: "(time {whatshap} haplotag -o {output} --reference {input.ref} {input.vcf} {input.bam} --ignore-read-groups --sample={sample}) > {log} 2>&1"


rule index_haplotagged_bam_unitigs:
	input:  "../../{sample}/hifiasm/ref_aln/asm.r_utg.haplotagged.bam"
	output: "../../{sample}/hifiasm/ref_aln/asm.r_utg.haplotagged.bam.bai"
	log: "log/index_haplotagged_bam_unitigs_{sample}.log"
	shell: "(time samtools index {input}) > {log} 2>&1"

###############################################################################
##############	   	  outputting cluster pairs		###############
###############################################################################


rule map_clust_to_chrom_dir:
	input:
		saarclust="utils/R-packages/SaaRclust/R/SaaRclust",
		hard_clust="../../{sample}/SaaRclust/Clusters/hard_clusters.RData"
	output: "../../{sample}/SaaRclust/Clusters/clust_partners.txt"
	log: "log/map_clust_to_chrom_dir_{sample}.log"
	shell: 
		'''
		(time Rscript utils/map_clust_to_chrom_dir.snakemake.R \
		{input.hard_clust}  \
		{output} \
		$(pwd)/utils/R-packages/ ) > {log} 2>&1
		'''


#################################################
#########	SS haplo strand states	#########
#################################################

rule bwa_map_SS_to_ref:
	input:
		ref=config["reference"],
		amb=config["reference"] + ".amb",
		ann=config["reference"] + ".ann",
		bwt=config["reference"] + ".bwt",
		pac=config["reference"] + ".pac",
		sa= config["reference"] + ".sa",
		ss= SSfastqDir+"/merged/{lib}.combined.fasta"
	output: SSbamDir+"/{lib}.bam"
	threads: 8
	log: "log/bwa_map_SS_to_ref_{lib}.log"
	shell: "(time bwa mem -t {threads} {input.ref} {input.ss} | samtools view -Sb - > {output}) > {log} 2>&1"

rule sort_SS_bam:
	input: SSbamDir+"/{lib}.bam"
	output: SSbamDir+"/{lib}.sorted.bam"
	log: "log/sort_SS_bam_{lib}.log"
	shell: "(time samtools sort -o {output} {input}) > {log} 2>&1"
	
rule index_SS_bam:
	input: SSbamDir+"/{lib}.sorted.bam"
	output: SSbamDir+"/{lib}.sorted.bam.bai"
	log: "log/index_SS_bam_{lib}.log"
	shell: "(time samtools index {input}) > {log} 2>&1"


rule haplotag_SS_reads:
	input:
		ref=config["reference"],
		amb=config["reference"] + ".amb",
		ann=config["reference"] + ".ann",
		bwt=config["reference"] + ".bwt",
		pac=config["reference"] + ".pac",
		sa=config["reference"] + ".sa",
		fai=config["reference"] + ".fai",
		vcf=config["phased_vcf_dir"]+"merged_phased.vcf.gz",
		tbi=config["phased_vcf_dir"]+"merged_phased.vcf.gz.tbi",
		bam=SSbamDir+"/{lib}.sorted.bam",
		bai=SSbamDir+"/{lib}.sorted.bam.bai",
	output: SSbamDir+"/{lib}_haplotagged.bam"
	log: "log/haplotag_SS_reads_lib{lib}.log"
	shell: "(time {whatshap} haplotag -o {output} --reference {input.ref} {input.vcf} {input.bam} --ignore-read-groups --sample {sample}) > {log} 2>&1"

rule index_ss_haplotagged_bams:
	input: SSbamDir+"/{lib}_haplotagged.bam"
	output: SSbamDir+"/{lib}_haplotagged.bam.bai"
	shell: "samtools index {input}"


rule output_ss_read_counts:
	input:
		ss_haplotagged_bam=SSbamDir+"/{lib}_haplotagged.bam",
		ss_haplotagged_index=SSbamDir+"/{lib}_haplotagged.bam.bai"
	output:
		ss_counts_file="../../HG00733/SaaRclust/ground_truth_strand_states/{lib}_chrom_haplo_count.data"
	script: "utils/count_ss_reads.snakemake.py"


rule output_ss_haplo_strand_states:
	input:
		ss_counts_file="../../HG00733/SaaRclust/ground_truth_strand_states/{lib}_chrom_haplo_count.data",
		clust_partners_file="../../{sample}/SaaRclust/Clusters/clust_partners.txt"
	output:
		SS_haplo_strand_states="../../HG00733/SaaRclust/ground_truth_strand_states/{sample}_{lib}_haplo_strand_states.data"
	params:
		min_w_frac_in_wc_state=0.4,
		max_w_frac_in_wc_state=0.6,
		max_haplo_count_ratio=0.15
	script: "utils/compute_ss_haplo_strand_states.snakemake.py"


