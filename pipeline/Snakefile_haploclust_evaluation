configfile: "config.yaml"
whatshap = config["whatshap"]
PBbamDir = config["pb_bam_dir"]
N = config["Nchunks"]
l = len(str(N))
chunkID = ['0'*(l-len(str(i)))+str(i) for i in range(N)]
sample = config["sample"]
w = config["w"]
kMinimap = config["k_minimap"]
fMinimap = config["f"]
z = config["z"]
SSfastqDir = config["SS_fastq_dir"]
SSbamDir = config["SS_bam_dir"]
outputfolder    = "SaaRclust_results"
chroms, = glob_wildcards(config["phased_vcf_dir"]+config["vcf_prefix"]+".{chrom}.vcf.gz")
libs, = glob_wildcards(SSfastqDir+"/{lib}_1.fastq.gz")
outputfolder    = "SaaRclust_results"
#numClustersHard = config["numClustersHard"]
testNumClustersHard = config["testNumClustersHard"]
#numClustersSoft = config["numClustersSoft"]
#EMiter          = config["EMiter"]
alpha           = config["alpha"]
minLib          = config["minLib"]
upperQ          = config["upperQ"]
logLth          = config["logLth"]
theta_constrain = config["theta_constrain"]
log_scale  	= config["log_scale"]
numAlignments   = config["numAlignments"]


wildcard_constraints:
	chunks = "[0-9]+",
	sample=sample,


rule all:
	input: 
		#expand("evaluation/strandphaser_bubble_phase_evaluation/k{k}_a{a}_l{l}_kminimap{kMinimap}_w{w}_f{f}_z{z}_{sample}.data", k=config["k"], a = config["kmer_abundance"], l = config["l"], kMinimap=kMinimap, w=w, f=fMinimap, z=z, sample=sample),
		#expand("evaluation/{itr}bubble_phase_evaluation/haplo_edit_dist_k{k}_a{a}_l{l}_kminimap{kMinimap}_w{w}_f{f}_z{z}_{sample}.data", k=config["k"], a = config["kmer_abundance"], l = config["l"], kMinimap=kMinimap, w=w, f=fMinimap, z=z, sample=sample, itr=["iteration1_", "iteration2_"]),
		#expand("evaluation/{itr}long_read_phase_evaluation/k{k}_a{a}_l{l}_kminimap{kMinimap}_w{w}_f{f}_z{z}_{sample}.data", k=config["k"], a = config["kmer_abundance"], l = config["l"], kMinimap=kMinimap, w=w, f=fMinimap, z=z, sample=sample, itr=["iteration1_", "iteration2_"]),
		#expand(PBbamDir+"/aln/{sample}.{chunks}.haplotagged.bam.bai", sample=sample, chunks=chunkID),
		expand("aligns_k{kMinimap}_w{w}_f{f}_z{z}/{sample}_ccs_cov_in_ss.data", kMinimap=kMinimap, w=w, f=fMinimap, z=z, sample=sample)
		

###########################################################
########### get long read coverages in ss reads ###########
###########################################################

rule output_ss_read_names:
    input: "aligns_k{kMinimap}_w{w}_f{f}_z{z}/{sample}_chunk{chunks}.maf.gz"
    output: "aligns_k{kMinimap}_w{w}_f{f}_z{z}/{sample}_chunk{chunks}_ss_names.data"
    log: "log/output_ss_names_k{kMinimap}_w{w}_f{f}_z{z}_{sample}_chunk{chunks}.log"
    shell: "(time zcat {input} | awk '{{print $1}}'  | sort -S 50% > {output}) > {log} 2>&1"

rule count_ccs_cov_in_ss:
    input: expand("aligns_k{kMinimap}_w{w}_f{f}_z{z}/{sample}_chunk{chunks}_ss_names.data", kMinimap=kMinimap, w=w, f=fMinimap, z=z, sample=sample, chunks=chunkID)
    output: "aligns_k{kMinimap}_w{w}_f{f}_z{z}/{sample}_ccs_cov_in_ss.data"
    threads:38
    log: "log/count_ccs_cov_in_ss_k{kMinimap}_w{w}_f{f}_z{z}_{sample}.log"
    shell:"(time sort -S 50% -m --parallel={threads} {input} | uniq -c > {output}) > {log} 2>&1"
		
######################################################
########### merging and indexing vcf files ###########
######################################################

rule index_vcf_file:
	input: config["phased_vcf_dir"]+config["vcf_prefix"]+".{chrom}.vcf.gz"
	output: config["phased_vcf_dir"]+config["vcf_prefix"]+".{chrom}.vcf.gz.tbi"
	log: "log/index_vcf_file_{chrom}.log"
	shell: "tabix {input}"

rule merge_chromosome_vcf:
	input:
		vcf=expand(config["phased_vcf_dir"]+config["vcf_prefix"]+".{chrom}.vcf.gz", chrom=chroms),
		tbi=expand(config["phased_vcf_dir"]+config["vcf_prefix"]+".{chrom}.vcf.gz.tbi", chrom=chroms)
	output: config["phased_vcf_dir"]+"merged_phased.vcf.gz"
	log: "log/merge_chromosome_vcf.log"
	shell: #"(time bcftools merge --force-samples -Oz {input.vcf} -o {output}) > {log} 2>&1"
		'''
		(time cat <(zcat {input[0]} | awk '/^#/{{print}}') <(zcat {input} | awk '/^chr/{{print}}') | bgzip -c > {output}) > {log} 2>&1
		'''


rule index_merged_phased_vcf:
	input: config["phased_vcf_dir"]+"merged_phased.vcf.gz"
	output: config["phased_vcf_dir"]+"merged_phased.vcf.gz.tbi"
	log: "log/index_merged_phased_vcf.log"
	shell: "(time tabix {input}) > {log} 2>&1"


###########################################
######### haplotagging PB reads ###########
###########################################

rule bwa_index_ref:
	input: config["reference"]
	output:
		config["reference"] + ".amb",
		config["reference"] + ".ann",
		config["reference"] + ".bwt",
		config["reference"] + ".pac",
		config["reference"] + ".sa"
	log: "log/bwa_index_ref.log"
	shell: "(time bwa index {input}) > {log} 2>&1"


rule samtools_index_ref:
	input: config["reference"]
	output: config["reference"] + ".fai"
	log: "log/samtools_index_ref.log"
	shell: "(time samtools faidx {input}) > {log} 2>&1"


rule bwa_map_PB_fasta:
	input:
		ref=config["reference"],
		amb=config["reference"] + ".amb",
		ann=config["reference"] + ".ann",
		bwt=config["reference"] + ".bwt",
		pac=config["reference"] + ".pac",
		sa=config["reference"] + ".sa",
		pb=PBbamDir+"/raw_reads/{sample}.{chunks}.fasta"
	output: PBbamDir+"/aln/{sample}.{chunks}.bam"
	threads: 1
	log: "log/bwa_map_PB_fasta_{sample}_{chunks}.log"
	shell: "(time bwa mem -t {threads} -x pacbio {input.ref} {input.pb} | samtools view -Sb - > {output}) > {log} 2>&1"

rule sort_pb_bam:
	input: PBbamDir+"/aln/{sample}.{chunks}.bam",
	output: PBbamDir+"/aln/{sample}.{chunks}.sorted.bam"
	log: "log/{sample}_{chunks}.log"
	shell: "(time samtools sort -o {output} {input}) > {log} 2>&1"


rule index_PB_bam:
	input:  PBbamDir+"/aln/{sample}.{chunks}.sorted.bam"
	output: PBbamDir+"/aln/{sample}.{chunks}.sorted.bam.bai"
	log: "log/index_PB_bam_{sample}_{chunks}.log"
	shell: "(time samtools index {input}) > {log} 2>&1"


rule haplotag_PB_reads:
	input:
		ref=config["reference"],
		amb=config["reference"] + ".amb",
		ann=config["reference"] + ".ann",
		bwt=config["reference"] + ".bwt",
		pac=config["reference"] + ".pac",
		sa=config["reference"] + ".sa",
		fai=config["reference"] + ".fai",
		vcf=config["phased_vcf_dir"]+"merged_phased.vcf.gz",
		tbi=config["phased_vcf_dir"]+"merged_phased.vcf.gz.tbi",
		bam=PBbamDir+"/aln/{sample}.{chunks}.sorted.bam",
		bai=PBbamDir+"/aln/{sample}.{chunks}.sorted.bam.bai",
	output: PBbamDir+"/aln/{sample}.{chunks}.haplotagged.bam"
	log: "log/haplotag_PB_reads_{sample}_{chunks}.log"
	shell: "(time {whatshap} haplotag -o {output} --reference {input.ref} {input.vcf} {input.bam} --ignore-read-groups --sample={sample}) > {log} 2>&1"


rule index_haplotagged_PB_bam:
	input:  PBbamDir+"/aln/{sample}.{chunks}.haplotagged.bam"
	output: PBbamDir+"/aln/{sample}.{chunks}.haplotagged.bam.bai"
	log: "log/index_haplotagged_PB_bam_{sample}_{chunks}.log"
	shell: "(time samtools index {input}) > {log} 2>&1"


###########################################
######### haplotagging snv bubbles ########
###########################################

rule bwa_map_snv_bubble_unitigs_to_ref:
	input:
		ref=config["reference"],
		amb=config["reference"] + ".amb",
		ann=config["reference"] + ".ann",
		bwt=config["reference"] + ".bwt",
		pac=config["reference"] + ".pac",
		sa=config["reference"] + ".sa",
		unitigs="bubbles/snv_bubbles_k{k}_a{a}_l{l}.fa"
	output: "bubbles/mapped_contigs_k{k}_a{a}_l{l}.snv.bubbles.unitigs.bam"
	log: "log/bwa_map_snv_bubble_unitigs_to_ref_k{k}_a{a}_l{l}.log"
	threads: 32
	shell:
		"(time bwa mem -t {threads} -c 1 {input.ref} {input.unitigs} | samtools view -Sb - > {output}) > {log} 2>&1"

rule sort_bam_snv_bubbles:
	input: "bubbles/mapped_contigs_k{k}_a{a}_l{l}.snv.bubbles.unitigs.bam"
	output: "bubbles/mapped_contigs_k{k}_a{a}_l{l}.snv.bubbles.unitigs.sorted.bam"
	log: "log/sort_bam_snv_bubbles_k{k}_a{a}l{l}.log"
	shell: "(time samtools sort -o {output} {input}) > {log} 2>&1"


rule index_bam_snv_bubbles:
	input:  "bubbles/mapped_contigs_k{k}_a{a}_l{l}.snv.bubbles.unitigs.sorted.bam"
	output: "bubbles/mapped_contigs_k{k}_a{a}_l{l}.snv.bubbles.unitigs.sorted.bam.bai"
	log: "log/index_bam_snv_bubbles_k{k}_a{a}l{l}.log"
	shell: "(time samtools index {input}) > {log} 2>&1"


rule haplotag_snv_bubbles:
	input:
		ref=config["reference"],
		amb=config["reference"] + ".amb",
		ann=config["reference"] + ".ann",
		bwt=config["reference"] + ".bwt",
		pac=config["reference"] + ".pac",
		sa=config["reference"] + ".sa",
		fai=config["reference"] + ".fai",
		vcf=config["phased_vcf_dir"]+"merged_phased.vcf.gz",
		tbi=config["phased_vcf_dir"]+"merged_phased.vcf.gz.tbi",
		bam="bubbles/mapped_contigs_k{k}_a{a}_l{l}.snv.bubbles.unitigs.sorted.bam",
		bai="bubbles/mapped_contigs_k{k}_a{a}_l{l}.snv.bubbles.unitigs.sorted.bam.bai",
	output: "bubbles/mapped_contigs_k{k}_a{a}_l{l}.snv.bubbles.unitigs.haplotagged.bam"
	log: "log/haplotag_snv_bubbles_k{k}_a{a}l{l}.log"
	shell: "(time {whatshap} haplotag -o {output} --reference {input.ref} {input.vcf} {input.bam} --ignore-read-groups --sample={sample}) > {log} 2>&1"


rule index_haplotagged_bam_snv_bubbles:
	input:  "bubbles/mapped_contigs_k{k}_a{a}_l{l}.snv.bubbles.unitigs.haplotagged.bam"
	output: "bubbles/mapped_contigs_k{k}_a{a}_l{l}.snv.bubbles.unitigs.haplotagged.bam.bai"
	log: "log/index_haplotagged_bam_snv_bubbles_k{k}_a{a}l{l}.log"
	shell: "(time samtools index {input}) > {log} 2>&1"


###############################################################################
##############	     SaaRclust HARD clustering evaluation	###############
###############################################################################


rule HARD_clustering_test:
	input:
		minimapFiles = expand("aligns_k{{kMinimap}}_w{{w}}_f{{f}}_z{{z}}/{{sample}}_chunk{chunks}.maf.gz", chunks=chunkID), 
		saarclust="utils/R-packages/SaaRclust/R/SaaRclust"
	output: "aligns_k{kMinimap}_w{w}_f{f}_z{z}/"+outputfolder+"_{sample}/Clusters/hardClusteringResults_{testNumClustersHard}clusters.RData"
	log: "log/HARD_clustering_{sample}_k{kMinimap}_w{w}_f{f}_z{z}_{testNumClustersHard}clusters.log"
	shell:
		"""
		(time Rscript utils/SaaRclust_hardclust_pipeline.R \
		aligns_k{wildcards.kMinimap}_w{wildcards.w}_f{wildcards.f}_z{wildcards.z} \
		aligns_k{wildcards.kMinimap}_w{wildcards.w}_f{wildcards.f}_z{wildcards.z}/{outputfolder}_{sample} \
		{wildcards.testNumClustersHard} \
		{alpha} \
		{numAlignments} \
		{log_scale} \
		$(pwd)/utils/R-packages/) \
		> {log} 2>&1
		"""

rule plot_num_found_clusters:
	input: expand("aligns_k{{kMinimap}}_w{{w}}_f{{f}}_z{{z}}/"+outputfolder+"_{{sample}}/Clusters/hardClusteringResults_{testNumClustersHard}clusters.RData", testNumClustersHard=testNumClustersHard)
	output:
		table="aligns_k{kMinimap}_w{w}_f{f}_z{z}/"+outputfolder+"_{sample}/Clusters/hardClusteringResults_num_hitted_clusters.data",
		plot="aligns_k{kMinimap}_w{w}_f{f}_z{z}/"+outputfolder+"_{sample}/Clusters/hardClusteringResults_num_hitted_clusters.pdf"
	log: "log/plot_num_found_clusters_k{kMinimap}_w{w}_f{f}_z{z}_{sample}.log"
	script: "utils/plot_num_found_clusters.snakemake.R"


###############################################################################
##############	     SaaRclust pairing clusters evaluation	###############
###############################################################################


rule evaluate_pairing_clusters:
	input:
		clust_chrom_count=expand("aligns_k{{kMinimap}}_w{{w}}_f{{f}}_z{{z}}/{{sample}}_chunk{chunks}_clust_chrom_dir_count.data", chunks=chunkID[3]),
		soft_clust=expand("aligns_k{{kMinimap}}_w{{w}}_f{{f}}_z{{z}}/"+outputfolder+"_{{sample}}/Clusters/{{sample}}_chunk{chunks}_clusters.RData", chunks=chunkID[3])
	output: "aligns_k{kMinimap}_w{w}_f{f}_z{z}/"+outputfolder+"_{sample}/clust_partners.txt"
	script: "utils/evaluate_pairing_clusters.R"

#########################################################
#########	ss clustering evaluation	#########
#########################################################

rule evaluate_ss_clustering:
	input:
		clust_to_chrom_dir="aligns_k{kMinimap}_w{w}_f{f}_z{z}/"+outputfolder+"_{sample}/clust_partners.txt",
		ss_clust="aligns_k{kMinimap}_w{w}_f{f}_z{z}/"+outputfolder+"_{sample}/SS_clusters.data",
		ss_bam_list=expand(SSbamDir+"/{lib}.sorted.bam", lib=libs),
	output: "evaluation/ss_clustering_evaluation_kminimap{kMinimap}_w{w}_f{f}_z{z}_{sample}.data"
	script: "utils/evaluate_ss_clustering.snakemake.py"


#########################################################
#########	bubble phasing evaluation	#########
#########################################################


rule count_bubble_clust_coverage:
	input: SSfastqDir + "/valid_exact_map_{x}_snv_bubbles_k{k}_a{a}_l{l}_kminimap{kMinimap}_w{w}_f{f}_z{z}_{sample}.data"
	output: SSfastqDir + "/bubble_clust_cov_{x}_snv_bubbles_k{k}_a{a}_l{l}_kminimap{kMinimap}_w{w}_f{f}_z{z}_{sample}.data"
	log: "log/count_bubble_clust_coverage_{x}_k{k}_a{a}_l{l}_kminimap{kMinimap}_w{w}_f{f}_z{z}_{sample}.log"
	shell: "(time tail -n +2 {input} | awk '{{print $3, $4, $5, $6, $7, $8}}' | sort | uniq -c > {output}) > {log} 2>&1"


rule cluster_snv_bubbles:
	input:
		bubble_clust_count=expand(SSfastqDir + "/bubble_clust_cov_{x}_snv_bubbles_k{{k}}_a{{a}}_l{{l}}_kminimap{{kMinimap}}_w{{w}}_f{{f}}_z{{z}}_{{sample}}.data", x=libs),
		clust_to_chrom="aligns_k{kMinimap}_w{w}_f{f}_z{z}/"+outputfolder+"_{sample}/clust_partners.txt",
	output:
		bubbles_clust="bubbles/snv_bubbles_clusters_k{k}_a{a}_l{l}_kminimap{kMinimap}_w{w}_f{f}_z{z}_{sample}.data",
	log: "log/cluster_snv_bubbles_k{k}_a{a}_l{l}_kminimap{kMinimap}_w{w}_f{f}_z{z}_{sample}.log"
	script: "utils/cluster_snv_bubbles2.snakemake.R"


#########################################################
#########	long read phasing evaluation	#########
#########################################################

rule evaluate_phasing:
	input:
		bubble_haplotagged_bam_file="bubbles/mapped_contigs_k{k}_a{a}_l{l}.snv.bubbles.unitigs.haplotagged.bam",
		bubble_haplotagged_bam_index="bubbles/mapped_contigs_k{k}_a{a}_l{l}.snv.bubbles.unitigs.haplotagged.bam.bai",
		bubble_phase_file="bubbles/{itr}phased_snv_bubbles_k{k}_a{a}_l{l}_kminimap{kMinimap}_w{w}_f{f}_z{z}_{sample}_withclsut.data",
		bubble_clust_file="bubbles/snv_bubbles_clusters_k{k}_a{a}_l{l}_kminimap{kMinimap}_w{w}_f{f}_z{z}_{sample}.data",
		clust_to_chrom_file="aligns_k{kMinimap}_w{w}_f{f}_z{z}/"+outputfolder+"_{sample}/clust_partners.txt",
		het_kmers=expand("aligns_k{{kMinimap}}_w{{w}}_f{{f}}_z{{z}}/het_kmers/bubble_pb_het_kmers_chunk{chunks}_k{{k}}_a{{a}}_l{{l}}_{{sample}}.data", chunks=chunkID[0]),
		long_read_haplotagged_bam_files=expand(PBbamDir+"/{{sample}}.{chunks}.haplotagged.bam", chunks=chunkID[0]),
		long_read_phase_files=expand("aligns_k{{kMinimap}}_w{{w}}_f{{f}}_z{{z}}/phased_long_reads/{{itr}}pb_phase_chunk{chunks}_k{{k}}_a{{a}}_l{{l}}_{{sample}}.data", chunks=chunkID[0]),

	output: 
		bubbles_clusering_evaluation="evaluation/{itr}bubble_phase_evaluation/k{k}_a{a}_l{l}_kminimap{kMinimap}_w{w}_f{f}_z{z}_{sample}.data",
		bubbles_haplo_edit_dist="evaluation/{itr}bubble_phase_evaluation/haplo_edit_dist_k{k}_a{a}_l{l}_kminimap{kMinimap}_w{w}_f{f}_z{z}_{sample}.data",
		long_read_phase_evaluation="evaluation/{itr}long_read_phase_evaluation/k{k}_a{a}_l{l}_kminimap{kMinimap}_w{w}_f{f}_z{z}_{sample}.data",
		long_reads_haplo_edit_dist="evaluation/{itr}long_read_phase_evaluation/haplo_edit_dist_k{k}_a{a}_l{l}_kminimap{kMinimap}_w{w}_f{f}_z{z}_{sample}.data",
		# testing outputs for observation
		long_reads_with_small_frac_haplo_edit_dist="evaluation/{itr}long_read_phase_evaluation/with_small_frac_haplo_edit_dist_k{k}_a{a}_l{l}_kminimap{kMinimap}_w{w}_f{f}_z{z}_{sample}.data",
		long_reads_with_peak_frac_haplo_edit_dist="evaluation/{itr}long_read_phase_evaluation/with_peak_frac_haplo_edit_dist_k{k}_a{a}_l{l}_kminimap{kMinimap}_w{w}_f{f}_z{z}_{sample}.data",
	
	params:
		bubbles_have_km="--with_km" if config["bubble_info"] else ""

	#script: "utils/evaluate_bubbles_phase.snakemake.py"
	shell:
		'''
		python3 utils/evaluate_haploclust.py \
		--bubble_bam_file {input.bubble_haplotagged_bam_file} \
		--bubble_phase_file {input.bubble_phase_file} \
		--bubble_clust_file {input.bubble_clust_file} \
		--clust_to_chrom_file {input.clust_to_chrom_file} \
		--het_kmers_files {input.het_kmers} \
		--long_read_haplotagged_bam_files {input.long_read_haplotagged_bam_files} \
		--long_read_phase_files {input.long_read_phase_files} \
		--bubbles_clusering_evaluation_file {output.bubbles_clusering_evaluation} \
		--bubbles_haplo_edit_dist_file {output.bubbles_haplo_edit_dist} \
		--long_read_phase_evaluation_file {output.long_read_phase_evaluation} \
		--long_reads_haplo_edit_dist_file {output.long_reads_haplo_edit_dist} \
		--long_reads_with_small_frac_haplo_edit_dist {output.long_reads_with_small_frac_haplo_edit_dist} \
		--long_reads_with_peak_frac_haplo_edit_dist {output.long_reads_with_peak_frac_haplo_edit_dist} \
		{params.bubbles_have_km}
		'''

rule evaluate_strandphaser_bubble_phasing:
	input:
		bubble_haplotagged_bam_file="bubbles/mapped_contigs_k{k}_a{a}_l{l}.snv.bubbles.unitigs.haplotagged.bam",
		bubble_phase_file="bubbles/strandphaser_phased_bubbles_k{k}_a{a}_l{l}_kminimap{kMinimap}_w{w}_f{f}_z{z}_{sample}.data",
		bubble_clust_file="bubbles/snv_bubbles_clusters_k{k}_a{a}_l{l}_kminimap{kMinimap}_w{w}_f{f}_z{z}_{sample}.data",
		clust_to_chrom_file="aligns_k{kMinimap}_w{w}_f{f}_z{z}/"+outputfolder+"_{sample}/clust_partners.txt",
	output: 
		evaluation="evaluation/strandphaser_bubble_phase_evaluation/k{k}_a{a}_l{l}_kminimap{kMinimap}_w{w}_f{f}_z{z}_{sample}.data",
		false_phased_bubbles_file="evaluation/strandphaser_false_phased_bubbles_k{k}_a{a}_l{l}_kminimap{kMinimap}_w{w}_f{f}_z{z}_{sample}.data"
	script: "utils/evaluate_bubbles_phase.snakemake.py"


#################################################
#########	SS haplo strand states	#########
#################################################

rule haplotag_SS_reads:
	input:
		ref=config["reference"],
		amb=config["reference"] + ".amb",
		ann=config["reference"] + ".ann",
		bwt=config["reference"] + ".bwt",
		pac=config["reference"] + ".pac",
		sa=config["reference"] + ".sa",
		fai=config["reference"] + ".fai",
		vcf=config["phased_vcf_dir"]+"merged_phased.vcf.gz",
		tbi=config["phased_vcf_dir"]+"merged_phased.vcf.gz.tbi",
		bam=SSbamDir+"/{lib}.sorted.bam",
		bai=SSbamDir+"/{lib}.sorted.bam.bai",
	output: SSbamDir+"/{lib}_haplotagged.bam"
	log: "log/haplotag_SS_reads_lib{lib}.log"
	shell: "(time {whatshap} haplotag -o {output} --reference {input.ref} {input.vcf} {input.bam} --ignore-read-groups --sample {sample}) > {log} 2>&1"

rule index_ss_haplotagged_bams:
	input: SSbamDir+"/{lib}_haplotagged.bam"
	output: SSbamDir+"/{lib}_haplotagged.bam.bai"
	shell: "samtools index {input}"


rule output_ss_read_counts:
	input:
		ss_haplotagged_bam=SSbamDir+"/{lib}_haplotagged.bam",
		ss_haplotagged_index=SSbamDir+"/{lib}_haplotagged.bam.bai"
	output:
		ss_counts_file="ground_truth_strand_states/{lib}_chrom_haplo_count.data"
	script: "utils/count_ss_reads.snakemake.py"


rule output_ss_haplo_strand_states:
	input:
		ss_counts_file="ground_truth_strand_states/{lib}_chrom_haplo_count.data",
		clust_partners_file="aligns_k{kMinimap}_w{w}_f{f}_z{z}/"+outputfolder+"_{sample}/clust_partners.txt"
	output:
		SS_haplo_strand_states="ground_truth_strand_states/{lib}_haplo_strand_states_k{kMinimap}_w{w}_f{f}_z{z}_{sample}.data"
	params:
		min_w_frac_in_wc_state=0.4,
		max_w_frac_in_wc_state=0.6,
		max_haplo_count_ratio=0.15
	script: "utils/compute_ss_haplo_strand_states.snakemake.py"


########################################################################################
#####################    assembly evaluation ###########################################
########################################################################################

# splitting bam files by haploclust groups
#rule whatshap_split:
#	input:
#		fastq=PBbamDir+"/{sample}.fastq.gz",
#		haplo_list="assembly/haplotype_lists/cluster{clust}_iteration2_pb_phase_kMinimap{kMinimap}_w{w}_f{f}_z{z}_k{k}_a{a}_l{l}_{sample}.data"
#	output:
#		splitted=expand("assembly/splitted_fastq/cluster{{clust}}_{haplo}_iteration2_pb_phase_kMinimap{{kMinimap}}_w{{w}}_f{{f}}_z{{z}}_k{{k}}_a{{a}}_l{{l}}_{{sample}}.fastq.gz", haplo=haplotypes)
#	log: "log/whatshap_split_{clust}_iteration2_pb_phase_kMinimap{kMinimap}_w{w}_f{f}_z{z}_k{k}_a{a}_l{l}_{sample}.log"
#	shell: "(time {whatshap} split {input.fastq} {input.haplo_list} --output-h1 {output[0]} --output-h2 {output[1]} --discard-unknown-reads {add_untagged} --pigz) > {log} 2>&1"
