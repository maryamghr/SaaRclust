import os
import subprocess
import zipfile
import sys

print(sys.version)


configfile: "config.yaml"

GRAPHPATH = config["graphfolder"]
SSfastqDir = config["SS_fastq_dir"]
SSbamDir = config["SS_bam_dir"]
chroms = ["chr" + str(x) for x in range(1, 23)]# + ["chrX"]
phasedSSvcfDir = config["phased_vcf_dir"]
whatshap = config["whatshap"]
PBbamDir = config["pb_bam_dir"]
minPBlen = config["min_pb_len"]
N = config["Nchunks"]
l = len(str(N))
chunkID = ['0'*(l-len(str(i)))+str(i) for i in range(N)]
sample = config["sample"]
w = config["w"]
kMinimap = config["k_minimap"]
fMinimap = config["f"]
z = config["z"]
outputfolder    = "SaaRclust_results"
haplotypes = ['H1', 'H2']


#####################################################################

###### getting clusters
clust_pairs_file = "aligns_k" + str(kMinimap) + "_w" + str(w) + "_f" + str(fMinimap) + "_z" + str(z) + "/SaaRclust_results_" + sample + "/clust_partners.txt"

clusters = []
clust_pairs = []

with open(clust_pairs_file) as f:
	next(f)
	for line in f:
		if line=="":
			continue

		sp = line.split()
		chr, clust1, clust2 = sp[0], sp[1], sp[2]
		chr = chr.split('_')[0]
		chr = chr.split('chr')[1]
		
		if chr=="X":
			chr="23"
		min_clust, max_clust = min(clust1, clust2), max(clust1, clust2)
		clust_pair = min_clust + '_' + max_clust
		
		clusters.append(clust1)
		if clust1 == min_clust:
			clust_pairs.append(clust_pair)

print('clusters =', clusters)
print('clust_pairs =', clust_pairs)
print('len(clust_pairs) =', len(clust_pairs))


#####################################################################

wildcard_constraints:
	clust = "[V]\d+",


rule all:
	input:
		expand("aligns_k{kMinimap}_w{w}_f{f}_z{z}/"+outputfolder+"_{sample}/Clusters/split/{sample}.{clust_pair}.fastq.gz", kMinimap=kMinimap, w=w, f=fMinimap, z=z, sample=sample, clust_pair=clust_pairs),
		expand("aligns_k{kMinimap}_w{w}_f{f}_z{z}/"+outputfolder+"_{sample}/Clusters/split/{sample}.{clust_pair}.fastq", kMinimap=kMinimap, w=w, f=fMinimap, z=z, sample=sample, clust_pair=clust_pairs),
		#expand("aligns_k{kMinimap}_w{w}_f{f}_z{z}/"+outputfolder+"_{sample}/Clusters/split/{sample}.{clust_pair}.fasta", kMinimap=kMinimap, w=w, f=fMinimap, z=z, sample=sample, clust_pair=clust_pairs),
		#expand("aligns_k{kMinimap}_w{w}_f{f}_z{z}/"+outputfolder+"_{sample}/Clusters/split/{sample}.{clust_pair}.haplotagged.bam", kMinimap=kMinimap, w=w, f=fMinimap, z=z, sample=sample, clust_pair=clust_pairs),
		#expand("aligns_k{kMinimap}_w{w}_f{f}_z{z}/"+outputfolder+"_{sample}/Clusters/split/aln_snv_bubbles_k{k}_a{a}_l{l}/cluster{clust_pair}.paf.gz", kMinimap=kMinimap, w=w, f=fMinimap, z=z, sample=sample, k=config["k"], a = config["kmer_abundance"], l = config["l"], clust_pair=clust_pairs)

########################################################################################################################
######################################## splitting into chromosomes ####################################################
########################################################################################################################

rule split_soft_clust_by_clust_pair:
	input: 
		soft_clust="aligns_k{kMinimap}_w{w}_f{f}_z{z}/"+outputfolder+"_{sample}/Clusters/soft_clusters_long_reads.data",
		clust_pairs="aligns_k{kMinimap}_w{w}_f{f}_z{z}/"+outputfolder+"_{sample}/clust_partners.txt"
	output: expand("aligns_k{{kMinimap}}_w{{w}}_f{{f}}_z{{z}}/"+outputfolder+"_{{sample}}/Clusters/cluster{clust_pair}.data", clust_pair=clust_pairs)
	log: "log/split_soft_clust_by_clust_pair__k{kMinimap}_w{w}_f{f}_z{z}_{sample}.log"
	script: "utils/split_long_reads_by_clust_pair.R"


rule split_long_reads_fastq:
	input:
		fastq=PBbamDir+"/{sample}.fastq.gz",
		name_list="aligns_k{kMinimap}_w{w}_f{f}_z{z}/"+outputfolder+"_{sample}/Clusters/cluster{clust_pair}.data"
	output:
		temp("aligns_k{kMinimap}_w{w}_f{f}_z{z}/"+outputfolder+"_{sample}/Clusters/split/{sample}.{clust_pair}.fastq")
	log: "log/split_fastq_{clust_pair}_kMinimap{kMinimap}_w{w}_f{f}_z{z}_{sample}.log"
	shell: "(time seqtk subseq {input} > {output}) > {log} 2>&1"


rule compress_split_fastq:
	input: "aligns_k{kMinimap}_w{w}_f{f}_z{z}/"+outputfolder+"_{sample}/Clusters/split/{sample}.{clust_pair}.fastq"
	output: "aligns_k{kMinimap}_w{w}_f{f}_z{z}/"+outputfolder+"_{sample}/Clusters/split/{sample}.{clust_pair}.fastq.gz"
	shell: "gzip {input}"


rule split_long_reads_fasta:
	input:
		fastq=PBbamDir+"/raw_reads/{sample}.fasta",
		name_list="aligns_k{kMinimap}_w{w}_f{f}_z{z}/"+outputfolder+"_{sample}/Clusters/cluster{clust_pair}.data"
	output:
		"aligns_k{kMinimap}_w{w}_f{f}_z{z}/"+outputfolder+"_{sample}/Clusters/split/{sample}.{clust_pair}.fasta"
	log: "log/split_fasta_{clust_pair}_kMinimap{kMinimap}_w{w}_f{f}_z{z}_{sample}.log"
	shell: "(time seqtk subseq {input} > {output}) > {log} 2>&1"


rule split_long_reads_bam:
	input:
		bam=PBbamDir+"/chr_split/{sample}.haplotagged.bam",
		name_list="aligns_k{kMinimap}_w{w}_f{f}_z{z}/"+outputfolder+"_{sample}/Clusters/cluster{clust_pair}.data"
	output:
		temp("aligns_k{kMinimap}_w{w}_f{f}_z{z}/"+outputfolder+"_{sample}/Clusters/split/{sample}.{clust_pair}.haplotagged.sam")
	log: "log/split_bam_{clust_pair}_kMinimap{kMinimap}_w{w}_f{f}_z{z}_{sample}.log"
	shell:
		'''
		(time samtools view -H {input.bam} > {output} &&
		samtools view {input.bam} | fgrep -w -f {input.name_list} >> {output}) > {log} 2>&1
		'''

rule sam_to_bam:
	input:
		"aligns_k{kMinimap}_w{w}_f{f}_z{z}/"+outputfolder+"_{sample}/Clusters/split/{sample}.{clust_pair}.haplotagged.sam"
	output:
		"aligns_k{kMinimap}_w{w}_f{f}_z{z}/"+outputfolder+"_{sample}/Clusters/split/{sample}.{clust_pair}.haplotagged.bam"
	log: "log/sam_to_bam_{clust_pair}_kMinimap{kMinimap}_w{w}_f{f}_z{z}_{sample}.log"
	shell: "(time samtools view -hb {input} > {output} ) > {log} 2>&1"


########################################################################################################################
######################### bubble to long reads alignments and clustering of bubbles ####################################
########################################################################################################################

rule minimap_align_bubbles_to_PB_reads:
	input:
		bubbles="bubbles/snv_bubbles_k{k}_a{a}_l{l}.fa",
		pb_reads="aligns_k{kMinimap}_w{w}_f{f}_z{z}/"+outputfolder+"_{sample}/Clusters/split/{sample}.{clust_pair}.fasta"
	output:
		"aligns_k{kMinimap}_w{w}_f{f}_z{z}/"+outputfolder+"_{sample}/Clusters/split/aln_snv_bubbles_k{k}_a{a}_l{l}/cluster{clust_pair}.paf.gz"
	threads: 14
	log: "log/minimap_align_bubbles_to_PB_reads_k{k}_a{a}_l{l}_kminimap{kMinimap}_w{w}_f{f}_z{z}_{sample}_{clust_pair}.log"
	shell: "(time minimap2 -c -t{threads} -k{wildcards.kMinimap} -w{wildcards.w} -f{wildcards.f} -z{wildcards.z} {input.pb_reads} {input.bubbles} | gzip -c > {output}) > {log} 2>&1"

rule count_bubble_clust_cov:
	input:
		minimap="aligns_k{kMinimap}_w{w}_f{f}_z{z}/"+outputfolder+"_{sample}/Clusters/split/aln_snv_bubbles_k{k}_a{a}_l{l}/cluster{clust_pair}.paf.gz",
		soft_clust="aligns_k{kMinimap}_w{w}_f{f}_z{z}/"+outputfolder+"_{sample}/Clusters/{sample}_chunk{chunks}_clusters.RData",
		clust_partners="aligns_k{kMinimap}_w{w}_f{f}_z{z}/"+outputfolder+"_{sample}/clust_partners.txt",
	output: temp("bubbles/snv_bubbles_clust_cov_chunk{chunks}_k{k}_a{a}_l{l}_kminimap{kMinimap}_w{w}_f{f}_z{z}_{sample}.data")
	log: "log/count_bubble_clust_cov_{sample}_chunk{chunks}_k{k}_a{a}_l{l}_k{kMinimap}_w{w}_f{f}_z{z}.log"
	script: 'utils/count_bubble_clust_cov.snakemake.R'


rule cluster_bubbles:
	input:
		clust_cov=expand("bubbles/snv_bubbles_clust_cov_chunk{chunks}_k{{k}}_a{{a}}_l{{l}}_kminimap{{kMinimap}}_w{{w}}_f{{f}}_z{{z}}_{{sample}}.data", chunks=chunkID),
	output: "bubbles/snv_bubbles_clusters_k{k}_a{a}_l{l}_kminimap{kMinimap}_w{w}_f{f}_z{z}_{sample}.data"
	log: "log/cluster_bubbles_k{kMinimap}_w{w}_f{f}_z{z}_k{k}_a{a}_l{l}_{sample}.log"
	script: "utils/cluster_short_reads.snakemake.py"

########################################################################################################################
######################### phasing long reads ####################################
########################################################################################################################


rule haploclust_phasing:
	input:
		bubble_fasta_file="bubbles/snv_bubbles_k{k}_a{a}_l{l}.fa",
		minimap_files_list="aligns_k{kMinimap}_w{w}_f{f}_z{z}/"+outputfolder+"_{sample}/Clusters/split/aln_snv_bubbles_k{k}_a{a}_l{l}/cluster{clust_pair}.paf.gz",
		long_reads_fasta_files="aligns_k{kMinimap}_w{w}_f{f}_z{z}/"+outputfolder+"_{sample}/Clusters/split/{sample}.{clust_pair}.fasta",
		bubble_haplotagged_bam_file="bubbles/mapped_contigs_k{k}_a{a}_l{l}.snv.bubbles.unitigs.haplotagged.bam",
		bubble_haplotagged_bam_index="bubbles/mapped_contigs_k{k}_a{a}_l{l}.snv.bubbles.unitigs.haplotagged.bam.bai",
		bubble_first_itr_phase_file="bubbles/iteration1_phased_snv_bubbles_k{k}_a{a}_l{l}_kminimap{kMinimap}_w{w}_f{f}_z{z}_{sample}_withclsut.data",
		bubble_clust_file="bubbles/snv_bubbles_clusters_k{k}_a{a}_l{l}_kminimap{kMinimap}_w{w}_f{f}_z{z}_{sample}.data",
		clust_to_chrom_file="aligns_k{kMinimap}_w{w}_f{f}_z{z}/"+outputfolder+"_{sample}/clust_partners.txt",
		long_read_haplotagged_bam_files="aligns_k{kMinimap}_w{w}_f{f}_z{z}/"+outputfolder+"_{sample}/Clusters/split/{sample}.{clust_pair}.haplotagged.bam",
	output:
		bubbles_phase_file="haploclust/cluster{clust_pair}/phased_snv_bubbles_iteration{itr}_k{k}_a{a}_l{l}_kminimap{kMinimap}_w{w}_f{f}_z{z}_{sample}.data",
		test_bubble_phase_file="haploclust/cluster{clust_pair}/test_phased_snv_bubbles_iteration{itr}_k{k}_a{a}_l{l}_kminimap{kMinimap}_w{w}_f{f}_z{z}_{sample}.data",
		long_reads_phase_file="haploclust/cluster{clust_pair}/pb_phase_iteration{itr}_k{kMinimap}_w{w}_f{f}_z{z}_k{k}_a{a}_l{l}_{sample}.data",
		bubbles_first_itr_haploclust_evaluation_file="haploclust/cluster{clust_pair}/bubble_first_itr_phase_evaluation/iteration{itr}_k{k}_a{a}_l{l}_kminimap{kMinimap}_w{w}_f{f}_z{z}_{sample}.data",
		bubbles_haploclust_evaluation_file="haploclust/cluster{clust_pair}/bubble_phase_evaluation/iteration{itr}_k{k}_a{a}_l{l}_kminimap{kMinimap}_w{w}_f{f}_z{z}_{sample}.data",
		bubbles_haplo_edit_dist_file="haploclust/cluster{clust_pair}/bubble_phase_evaluation/iteration{itr}_haplo_edit_dist_k{k}_a{a}_l{l}_kminimap{kMinimap}_w{w}_f{f}_z{z}_{sample}.data",
		long_reads_haploclust_evaluation_file="haploclust/cluster{clust_pair}/long_read_phase_evaluation/iteration{itr}_k{k}_a{a}_{itr}_l{l}_kminimap{kMinimap}_w{w}_f{f}_z{z}_{sample}.data",
		long_reads_haplo_edit_dist_file="haploclust/cluster{clust_pair}/long_read_phase_evaluation/iteration{itr}_haplo_edit_dist_k{k}_a{a}_l{l}_kminimap{kMinimap}_w{w}_f{f}_z{z}_{sample}.data",
	params:
		het_kmer_len=config["het_kmer_len"],
		with_km="--with_km" if config["bubble_info"] else "",
		itr=2,
		min_bubbles=2
	log: "log/haploclust_phasing_bubbles_cluster{clust_pair}_bubbles_{itr}iterations_k{k}_a{a}_l{l}_kminimap{kMinimap}_w{w}_f{f}_z{z}_{sample}.log"
	shell:
		'''
		time python3 utils/haploclust.snakemake.py \
		--bubble_fasta_file {input.bubble_fasta_file} \
		--minimap_files_list {input.minimap_files_list} \
		--long_reads_fasta_files {input.long_reads_fasta_files} \
		--bubble_haplotagged_bam_file {input.bubble_haplotagged_bam_file} \
		--bubble_first_itr_phase_file {input.bubble_first_itr_phase_file} \
		--bubble_clust_file {input.bubble_clust_file} \
		--clust_to_chrom_file {input.clust_to_chrom_file} \
		--long_read_haplotagged_bam_files {input.long_read_haplotagged_bam_files} \
		--bubble_phase_file {output.bubbles_phase_file} \
		--long_read_phase_file {output.long_reads_phase_file} \
		--bubbles_first_itr_haploclust_evaluation_file {output.bubbles_first_itr_haploclust_evaluation_file} \
		--bubbles_haploclust_evaluation_file {output.bubbles_haploclust_evaluation_file} \
		--bubbles_haplo_edit_dist_file {output.bubbles_haplo_edit_dist_file} \
		--long_reads_haploclust_evaluation_file {output.long_reads_haploclust_evaluation_file} \
		--long_reads_haplo_edit_dist_file {output.long_reads_haplo_edit_dist_file} \
		--itr {params.itr} \
		--min_bubbles {params.min_bubbles} \
		--het_kmer_len {params.het_kmer_len} \
		{params.with_km}
		'''
