import os
import subprocess
import zipfile
import sys

print(sys.version)


configfile: "config.yaml"

sample = config["sample"]
GRAPHPATH = config["graphfolder"]
SSfastqDir = config["SS_fastq_dir"]
SSbamDir = config["SS_bam_dir"]
chroms = ["chr" + str(x) for x in range(1, 23)]# + ["chrX"]
phasedSSvcfDir = config["phased_vcf_dir"]
whatshap = config["whatshap"]
whatshap_split = config["whatshap_split"]
BubbleGun = config["BubbleGun"]
hifiasm = config["hifiasm"]
PBbamDir = config["pb_bam_dir"]
minPBlen = config["min_pb_len"]
N = config["Nchunks"]
l = len(str(N))
chunkID = ['0'*(l-len(str(i)))+str(i) for i in range(N)]

numClustersHard = config["numClustersHard"]
numClustersSoft = config["numClustersSoft"]
EMiter          = config["EMiter"]
alpha           = config["alpha"]
minLib          = config["minLib"]
upperQ          = config["upperQ"]
logLth          = config["logLth"]
theta_constrain = config["theta_constrain"]
log_scale    = config["log_scale"]
ss_names_filter = config["SS_names_filter"]
numAlignments   = config["numAlignments"]
chromosomes = range(1, config["num_chromosomes"]+1)

w = config["w"]
kMinimap = config["k_minimap"]
fMinimap = config["f"]
z = config["z"]
outputfolder    = "SaaRclust_results"
haplotypes = ['H1', 'H2']
phasing_itr = config["num_iterations"]
libs, = glob_wildcards(SSfastqDir+"/{lib}_1.fastq.gz")


#####################################################################

wildcard_constraints:
	sample = "[a-zA-Z\d]+"


rule all:
	input:
		expand(SSfastqDir+"/{sample}/split/all_libs_{clust}.fasta", sample=sample, clust=chromosomes),
		expand("../../{sample}/hifiasm/split/asm.r_bubbles_{clust}.fasta", sample=sample, clust=chromosomes),
		expand("../../{sample}/phased_unitigs/{clust}_phased_unitigs.data", sample=sample, clust=chromosomes),
		expand("../../{sample}/hifiasm/split/asm.h2.r_utg_{clust}.gfa", sample=sample, clust=chromosomes),
		expand("../../{sample}/split_raw_long_reads/{clust}_{haplo}.fasta", sample=sample, clust=chromosomes, haplo=["h1","h2"])

###############################################################################
##############		merging read pairs with PEAR		###############
###############################################################################

rule pear_merge_mates:
	input:
		fq1=SSfastqDir+"/{sample}/{lib}_1.fastq.gz",
		fq2=SSfastqDir+"/{sample}/{lib}_2.fastq.gz",
        
	output:
		SSfastqDir+"/{sample}/merged/{lib}.assembled.fastq",
		SSfastqDir+"/{sample}/merged/{lib}.discarded.fastq",
		SSfastqDir+"/{sample}/merged/{lib}.unassembled.forward.fastq",
		SSfastqDir+"/{sample}/merged/{lib}.unassembled.reverse.fastq"
        
	log: "log/pear_merge_mates_{lib}.log"
        
	shell: "(time pear -f {input.fq1} -r {input.fq2} -t 101 -o {SSfastqDir}/{wildcards.sample}/merged/{wildcards.lib}) > {log} 2>&1"
	

rule concat_assembled_with_first_pair_of_unassembled:
	input:
		SSfastqDir+"/{sample}/merged/{lib}.assembled.fastq",
		SSfastqDir+"/{sample}/merged/{lib}.unassembled.forward.fastq",
	output: SSfastqDir+"/{sample}/merged/{lib}.combined.fasta"
	log: "log/concat_merged_with_first_unmerged_{lib}.log"
	shell: "(time bioawk -c fastx '{{print \">\"$name; print $seq}}' <(cat {input}) > {output}) > {log} 2>&1"

########################################################################################################################
################################### hifiasm ##############################################
########################################################################################################################		

rule hifiasm:
	input: fastq=PBbamDir+"/{sample}.fastq.gz",
	output:
		gfa="../../{sample}/hifiasm/asm.r_utg.gfa",
		fa="../../{sample}/hifiasm/asm.r_utg.fa",
	threads: 38
	log: "log/hifiasm_{sample}.log"
	shell:
		'''
		DIR=$(dirname {output.gfa}) &&
		(time {hifiasm} -o $DIR/asm -t {threads} {input} &&
		time grep S {output.gfa} | awk '{{print \">\"$2\"\\n\"$3}}' > {output.fa}) > {log} 2<&1
		'''
    
    
########################################################################################################################
###################################  aligning ss reads to hifiasm unitigs ##############################################
########################################################################################################################

rule bwa_index_hifiasm_unitigs:
	input: "../../{sample}/hifiasm/asm.r_utg.fa"
	output: expand("../../{{sample}}/hifiasm/asm.r_utg.fa.{extention}", extention=['amb', 'ann', 'bwt', 'pac', 'sa'])
	log: "log/bwa_index_hifiasm_unitigs_{sample}.log"
	shell: "(time bwa index {input}) > {log} 2>&1"

rule bwa_align:
	input:
		unitigs="../../{sample}/hifiasm/asm.r_utg.fa",
		unitigs_index=expand("../../{{sample}}/hifiasm/asm.r_utg.fa.{extention}", extention=['amb', 'ann', 'bwt', 'pac', 'sa']),
		ss_reads=SSfastqDir+"/{sample}/merged/{lib}.combined.fasta"
	output: temp("../../{sample}/temp_bwa_ss_unitigs/{lib}.bam")
	threads: 2
	log: "log/bwa_align_chunks_{sample}_{lib}.log"
	shell: "(time bwa mem -t {threads} {input.unitigs} {input.ss_reads} | samtools view -Sb - > {output}) > {log} 2>&1"

rule bwa_sort:
	input: "../../{sample}/temp_bwa_ss_unitigs/{lib}.bam"
	output: "../../{sample}/bwa_ss_unitigs/{lib}.bam"
	log: "log/bwa_sort_{sample}_{lib}.log"
	shell:
		'''
		(time samtools sort -o {output} {input}) > {log} 2>&1
		'''

rule mark_duplicates:
	input: "../../{sample}/bwa_ss_unitigs/{lib}.bam"
	output: "../../{sample}/bwa_ss_unitigs/{lib}.mdup.bam",
	log: "log/mark_duplicates_{sample}_{lib}.log"
	shell: 
		'''
		(time sambamba markdup {input} {output}) > {log} 2>&1
		'''

rule bwa_index:
	input: "../../{sample}/bwa_ss_unitigs/{lib}.mdup.bam"
	output: "../../{sample}/bwa_ss_unitigs/{lib}.mdup.bam.bai"
	log: "log/bwa_index_{sample}_{lib}.log"
	shell:
		'''
		(time samtools index {input}) > {log} 2>&1
		'''
		
#rule minimap2_align_SS_to_PB:
#	input:
#		unitigs="../../{sample}/hifiasm/asm.r_utg.fa",
#		ss_reads=SSfastqDir+"/{sample}/merged/{lib}.combined.fasta"
#	output: "../../{sample}/minimap2_ss_unitigs/{lib}.paf.gz"
#	threads: 2
#	log: "log/minimap2_align_chunks_{sample}_{lib}.log"
#	shell: "(time minimap2 -sr -t{threads} {input.unitigs} {input.ss_reads} | gzip -c > {output}) > {log} 2>&1"
	

########################################################################################################################
###################################  SaaRclust ##############################################
########################################################################################################################

# TODO: correct and test the command line options
rule SaaRclust:
	input:
		bam=expand("../../{{sample}}/bwa_ss_unitigs/{lib}.bam", lib=libs),
		bai=expand("../../{{sample}}/bwa_ss_unitigs/{lib}.bam.bai", lib=libs),
		saarclust="utils/R-packages/SaaRclust/R/SaaRclust"
	output:
		hard_clust="../../{sample}/SaaRclust/Clusters/hard_clusters.RData",
		soft_clust="../../{sample}/SaaRclust/Clusters/soft_clusters.RData",
		ML_clust="../../{sample}/SaaRclust/Clusters/MLclust.data",
		ss_clust="../../{sample}/SaaRclust/Clusters/ss_clusters.data",
		ss_clust_sp=expand("../../{{sample}}/SaaRclust/Clusters/ss_clusters_{clust}.data", clust=chromosomes),
		clust_pairs="../../{sample}/SaaRclust/Clusters/clust_partners.txt",
		wc_cells_clusters="../../{sample}/SaaRclust/Clusters/wc_cells_clusters.data"
	params:
		input_type="bam"
	threads: 32
	log: "log/SaaRclust_{sample}_initial_clusters.log"
	shell:
		"""
		(time Rscript utils/SaaRclust.snakemake.R \
		../../{sample}/bwa_ss_unitigs \
		../../{sample}/SaaRclust \
		{params.input_type} \
		{numClustersHard} \
		{alpha} \
		{numAlignments} \
		{log_scale} \
		{EMiter} \
		{minLib} \
		{upperQ} \
		{logLth} \
		{threads} \
		$(pwd)/utils/R-packages/) \
		> {log} 2>&1
		"""

########################################################################################################################
################################### splitting long reads into chromosomes ##############################################
########################################################################################################################

rule merge_all_ss_fasta:
	input: expand(SSfastqDir+"/{sample}/{lib}.combined.fasta", lib=libs)
	output: SSfastqDir+"/{sample}/split/all_libs.fasta"
	shell:
		'''
		for f in {input}
		do
			libname=$(basename $f .combined.fasta)
			echo libname = $libname
			bioawk -c fastx -v libname=$libname '{{print \">\"$name"_"libname; print $seq}}' $f >> {output}
		done
		'''

rule split_ss_reads:
	input:
		fasta=SSfastqDir+"/{sample}/split/all_libs.fasta",
		clust="../../{sample}/SaaRclust/Clusters/ss_clusters.data",
	output:expand(SSfastqDir+"/{{sample}}/split/all_libs_{clust}.fasta", clust=chromosomes)
	log: "log/split_ss_reads_{sample}.log"
	shell: "(time python3 {whatshap_split} {input.fasta} {input.clust} --split-by-cluster) > {log} 2>&1"


rule split_hifiasm_graph:
	input:
		gfa="../../{sample}/hifiasm/asm.r_utg.gfa",
		fasta="../../{sample}/hifiasm/asm.r_utg.fa",
		clust="../../{sample}/SaaRclust/Clusters/MLclust.data",
	output:
		gfa=expand("../../{{sample}}/hifiasm/split/asm.r_utg_{clust}.gfa", clust=chromosomes),
		fasta=expand("../../{{sample}}/hifiasm/split/asm.r_utg_{clust}.fa", clust=chromosomes),
	log: "log/split_ss_reads_{sample}.log"
	shell: 
		'''
		DIR=$(dirname {output.gfa[0]}) &&
		(time python3 {whatshap_split} {input.gfa} {input.clust} --output-folder $DIR --split-by-cluster &
		python3 {whatshap_split} {input.fasta} {input.clust} --output-folder $DIR --split-by-cluster) > {log} 2>&1
		'''

########################################################################################################################
##################################### Detecting Bubbles in Hifiasm Graph ###############################################
########################################################################################################################


rule detect_bubbles_overlap_graph:
	input: "../../{sample}/hifiasm/split/asm.r_utg_{clust}.gfa"
	output: "../../{sample}/hifiasm/split/asm.r_bubbles_{clust}.fasta"
	log: "log/detect_bubbles_overlap_graph_{sample}_{clust}_r.log"
	shell: "(time {BubbleGun} -g {input} bchains --fasta {output})> {log} 2>&1"

########################################################################################################################
##################################### Mapping Strand-seq read to Bubbles ###############################################
########################################################################################################################

rule map_SS_reads_to_unitigs:
	input:
		SSreads=SSfastqDir+"/{sample}/split/all_libs_{clust}.fasta",
		utg="../../{sample}/hifiasm/split/asm.r_utg_{clust}.fa",
	output:
		map="../../{sample}/exact_match/{clust}_r_utg_maximal_uniqe_exact_match.data",
	threads: 2
	log: "log/map_SS_reads_to_unitigs_{sample}_{clust}.log"
	shell: 
		'''
		(time bwa index {input.utg} &&
		bwa fastmap -w 1 -l 75 {input.utg} {input.SSreads} > {output}) > {log} 2>&1
		'''

rule output_overlap_graph_unitigs_valid_maps:
	input:
		map="../../{sample}/exact_match/{clust}_r_utg_maximal_uniqe_exact_match.data",
		bubbles="../../{sample}/hifiasm/split/asm.r_bubbles_{clust}.fasta",
	output: "../../{sample}/exact_match/valid_{clust}_r_utg_maximal_uniqe_exact_match.data"
	log: "log/output_valid_maps_{sample}_{clust}.log"
	script: "utils/output_valid_maps.snakemake.py"

########################################################################################################################
#################################### Phasing Strand-seq reads, bubbles, and Unitigs ####################################
########################################################################################################################

# TODO: fix the problem of strandphaser phased bubbles. Haplotype sorting of strand states is accurate, but phasing bubbles is not accurate.
rule strandphaser_overlap_graph:
	input:
		ss_clust="../../{sample}/SaaRclust/Clusters/ss_clusters_{clust}.data",
		clust_pairs="../../{sample}/SaaRclust/Clusters/clust_partners.txt",
		map="../../{sample}/exact_match/valid_{clust}_r_utg_maximal_uniqe_exact_match.data",
		bubbles="../../{sample}/hifiasm/split/asm.r_bubbles_{clust}.fasta",
		wc_cell_clust="../../{sample}/SaaRclust/Clusters/wc_cells_clusters.data",
	output:
		phased_strand_states="../../{sample}/phased_strand_states/haplo_strand_states_{clust}.data",
	log: "log/strandphaser_{sample}_{clust}.log"
	script: "utils/strandphaser.snakemake.R"


rule phase_unitigs:
	input:
		ss_clust="../../{sample}/SaaRclust/Clusters/ss_clusters.data",
		map="../../{sample}/exact_match/valid_{clust}_r_utg_maximal_uniqe_exact_match.data",
		bubbles="../../{sample}/hifiasm/split/asm.r_bubbles_{clust}.fasta",
		phased_strand_states="../../{sample}/phased_strand_states/haplo_strand_states_{clust}.data",
	output: "../../{sample}/phased_unitigs/{clust}_phased_unitigs.data"
	script: "utils/phase_snv_bubbles.snakemake.py"

########################################################################################################################
################################################## haplosplit graph ####################################################
########################################################################################################################

rule haplosplit_graph:
	input:
		input_gfa="../../{sample}/hifiasm/split/asm.r_utg_{clust}.gfa",
		haplo_file="../../{sample}/phased_unitigs/{clust}_phased_unitigs.data"
	output: 
		gfa_h1="../../{sample}/hifiasm/split/asm.h1.r_utg_{clust}.gfa",
		gfa_h2="../../{sample}/hifiasm/split/asm.h2.r_utg_{clust}.gfa",
		gfa_untagged="../../{sample}/hifiasm/split/asm.untagged.r_utg_{clust}.gfa",
		reads_fa_h1="../../{sample}/split_raw_long_reads/read_names_{clust}_h1.data",
		reads_fa_h2="../../{sample}/split_raw_long_reads/read_names_{clust}_h2.data",
	log: "log/haplosplit_graph_{sample}_{clust}.log"
	shell:
		'''
		(time python3 {whatshap_split} {input} --output-h1 {output.gfa_h1} --output-h2 {output.gfa_h2} --output-untagged {output.gfa_untagged} &&
		awk '$1=="A" {{print $5}} ' {output.gfa_h1} > {output.reads_fa_h1} &&
		awk '$1=="A" {{print $5}} ' {output.gfa_h2} > {output.reads_fa_h2}) > {log} 2>&1
		'''

rule haplosplit_long_reads_fastq:
	input:
		fastq=PBbamDir+"/{sample}.fastq.gz",
		haplo_list="../../{sample}/split_raw_long_reads/read_names_{clust}_{haplo}.data"
	output: "../../{sample}/split_raw_long_reads/{clust}_{haplo}.fasta"
	log: "log/haplosplit_unitig_fasta_{sample}_{clust}.log"
	shell:
		'''
		(time seqtk subseq {input.fastq} {input.haplo_list} > {output}) > {log} 2>&1
		'''
	
rule hifiasm_per_haplo:
	input: "../../{sample}/split_raw_long_reads/{clust}_{haplo}.fasta"
	output:
		gfa="../../{sample}/split_raw_long_reads/hifiasm_{clust}_{haplo}/asm.p_ctg.gfa",
		fa="../../{sample}/split_raw_long_reads/hifiasm_{clust}_{haplo}/asm.p_ctg.fa",
	threads: 4
	log: "log/hifiasm_k{kMinimap}_w{w}_f{f}_z{z}_{sample}_{clust_pair}_{haplo}.log"
	shell:
		'''
		DIR=$(dirname {output.gfa}) &&
		(time {hifiasm} -o $DIR/asm -t {threads} {input} &&
		awk '/^S/{{print ">"$2;print $3}}' {output.gfa} > {output.fa}) > {log} 2<&1
		'''

